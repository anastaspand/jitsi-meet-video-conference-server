AWSTemplateFormatVersion: '2010-09-09'
Description: Set up a personal Jitsi meet server as an EC2 instance.
  See https://github.com/jtrefke/jitsi-meet-video-conference-server

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Server configuration'
        Parameters:
          - FullyQualifiedHostname
          - InstanceSize
          - InstanceMaximumHourlyPrice
      - Label:
          default: 'Service schedule (optional)'
        Parameters:
          - InstanceStartupTimes
          - InstanceShutdownTimes
      - Label:
          default: 'SSL certificate (optional, one recommended)'
        Parameters:
          - SslLetsencryptEmail
          - SslCertificateCrt
          - SslCertificateKey
      - Label:
          default: 'Meeting authentication (optional, disabled when empty)'
        Parameters:
          - MeetingCreatorUsername
          - MeetingCreatorPassword
      - Label:
          default: 'URLs to request pre-install, post-install/reboot (optional, disabled when empty)'
        Parameters:
          - HooksPreInstallUrl
          - HooksPostInstallUrl
          - HooksWaitTime
      - Label:
          default: 'Jitsi customizations (optional)'
        Parameters:
          - JitsiWatermarkImageUrl
          - JitsiEnableWelcomePage
          - JitsiStartAudioMuted
          - JitsiStartVideoMuted
          - JitsiRequireDisplayName
      - Label:
          default: '[not implemented]'
        Parameters:
          - DialinSipAccountUid
          - DialinSipPassword
          - DialinSipPhoneNumbers
    ParameterLabels:
      FullyQualifiedHostname:
        default: '* Hostname'
      SslLetsencryptEmail:
        default: 'Letsencrypt SSL certificate email'
      SslCertificateCrt:
        default: 'SSL certificate'
      SslCertificateKey:
        default: 'SSL certificate key'
      MeetingCreatorUsername:
        default: 'Meeting creator username'
      MeetingCreatorPassword:
        default: 'Meeting creator password'
      HooksPreInstallUrl:
        default: 'Pre install request URL'
      HooksPostInstallUrl:
        default: 'Post install request URL'
      HooksWaitTime:
        default: 'Wait time'
      InstanceSize:
        default: '* Instance Size'
      InstanceMaximumHourlyPrice:
        default: 'Maximum Hourly Price'
      InstanceStartupTimes:
        default: 'Scheduled startup times'
      InstanceShutdownTimes:
        default: 'Scheduled shutdown times'
      JitsiWatermarkImageUrl:
        default: 'Watermark image URL'
      JitsiEnableWelcomePage:
        default: 'Enable welcome page'
      JitsiStartAudioMuted:
        default: 'Mute audio'
      JitsiStartVideoMuted:
        default: 'Mute video'
      JitsiRequireDisplayName:
        default: 'Require display name'
      DialinSipAccountUid:
        default: 'SIP account UID'
      DialinSipPassword:
        default: 'SIP password'
      DialinSipPhoneNumbers:
        default: 'SIP phone numbers'
      SshKeyName:
        default: 'EC2 SSH key name'

Parameters:
  FullyQualifiedHostname:
    Description: Fully qualified hostname (e.g. meet.example.com)
    Type: String
    MinLength: 4
    MaxLength: 255
    ConstraintDescription: Must be between 4 and 255 characters.
  MeetingCreatorUsername:
    Description: Username for the meeting creator account
    Type: String
    MinLength: 0
    MaxLength: 255
  MeetingCreatorPassword:
    Description: Password for the meeting creator account
    NoEcho: true
    Type: String
    MinLength: 0
    MaxLength: 255
  SslLetsencryptEmail:
    Description: E-Mail address for SSL certificate from letsencrypt.org
    Type: String
    MaxLength: '255'
    ConstraintDescription: Must be less than 255 characters.
  SslCertificateCrt:
    Description: Existing SSL certificate (gzipped and base64 encoded (see "helpers/encode-certificate"))
    Type: String
    NoEcho: true
  SslCertificateKey:
    Description: Existing SSL certificate key (gzipped and base64 encoded (see "helpers/encode-certificate"))
    Type: String
    NoEcho: true
  # FirewallEnableSsh:
  #   Description: Disable SSH access to this server in firewall
  #   Default: true
  #   Type: String
  #   AllowedValues: [true, false]
  HooksPreInstallUrl:
    Description: URL to invoke before installation starts
    Type: String
  HooksPostInstallUrl:
    Description: URL to invoke after installation ends and after reboot
    Type: String
  HooksWaitTime:
    Description: Time to wait after invoking pre or post hooks (in seconds)
    Type: Number
    Default: 121
  JitsiWatermarkImageUrl:
    Description: Custom watermark image URL that is overlayed in top left corner
    Type: String
  JitsiEnableWelcomePage:
    Description: Enable welcome page at root path
    Default: true
    Type: String
    AllowedValues: [true, false]
  JitsiStartAudioMuted:
    Description: Mute audio for new participants after the nth participant enters
    Type: Number
    Default: 4
    MinValue: 0
    MaxValue: 1000
  JitsiStartVideoMuted:
    Description: Mute video for new participants after the nth participant enters
    Type: Number
    Default: 10
    MinValue: 0
    MaxValue: 1000
  JitsiRequireDisplayName:
    Description: Require participant to enter a display name
    Type: String
    AllowedValues: [true, false]
    Default: true
  DialinSipAccountUid:
    Description: Account UID for SIP account (e.g. 453252@provider.net)
    Type: String
    MinLength: 0
    MaxLength: 255
  DialinSipPassword:
    Description: Password for SIP account
    NoEcho: true
    Type: String
    MinLength: 0
    MaxLength: 255
  DialinSipPhoneNumbers:
    Description: Password for SIP account
    Type: String
    AllowedPattern: '([^,]+((,[^,]+)+)?)?'
  InstanceMaximumHourlyPrice:
    Description: Maximum price per hour to bid on spot market; if not provided, default on-demand pricing will be used.
    Type: String
    AllowedPattern: '([0-9]\.[0-9]+|^$)'
    ConstraintDescription: 'Must be a dot-separated decimal number'
  InstanceStartupTimes:
    Description: Schedule regular server start in cron syntax (e.g. "3 7 * * 1-5" for "Mon-Fri at 7:03am")
    Type: String
    AllowedPattern: "(.+ .+ .+ .+ .+|^$)"
  InstanceShutdownTimes:
    Description: Schedule regular server shutdown in cron syntax (e.g. "0 19 26 * *" for "every 26th of the month at 7:00pm")
    Type: String
    AllowedPattern: "(.+ .+ .+ .+ .+|^$)"
  SshKeyName:
    Type: String
    Description: Existing keyname; to be used for debugging purposes only

  InstanceSize:
    Description: EC2 Instance Type
    Type: String
    Default: Small.t3.small
    AllowedValues:
    - Micro.t3.micro
    - Small.t3.small
    - Medium.t3.medium
    - Large.m5.large
    - XtraLarge.m5.xlarge
    - XtraXtralarge.m5.2xlarge

Mappings:
  AWSInstanceType2Arch:
    Micro.t3.micro:
      InstanceType: t3.micro
    Small.t3.small:
      InstanceType: t3.small
    Medium.t3.medium:
      InstanceType: t3.medium
    Large.m5.large:
      InstanceType: m5.large
    XtraLarge.m5.xlarge:
      InstanceType: m5.xlarge
    XtraXtralarge.m5.2xlarge:
      InstanceType: m5.2xlarge
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0a4f4704a9146742a
    us-east-2:
      HVM64: ami-004d3abe7e5109c79
    us-west-1:
      HVM64: ami-0777d8c544fb25aec
    us-west-2:
      HVM64: ami-0e23ea41be77feacd
    eu-west-1:
      HVM64: ami-03d8261f577d71b6a
    eu-west-2:
      HVM64: ami-0ed2df11a6d41ea78
    eu-west-3:
      HVM64: ami-0fd3289ae09a732cd
    eu-north-1:
      HVM64: ami-0f6203da33f64adea
    eu-central-1:
      HVM64: ami-0b6f46ba4d94838a0
    ap-northeast-1:
      HVM64: ami-03b993a5a631b0050
    ap-northeast-2:
      HVM64: ami-0d97f5f5359ff205a
    ap-southeast-1:
      HVM64: ami-002ea395007afeafb
    ap-southeast-2:
      HVM64: ami-07ec7aee8a573b2ae
    ap-southeast-3:
      HVM64: ami-0c1c5e417f8137299
    ap-south-1:
      HVM64: ami-03aac205d9db3c59e
    ap-east-1:
      HVM64: ami-8c195ffd
    sa-east-1:
      HVM64: ami-4090f22c
    ca-central-1:
      HVM64: ami-05f70cea83f9e5e4b
    me-south-1:
      HVM64: ami-0fb7c82ef28f3fa55

Conditions:
  SshKeyNameProvided: !Not [!Equals [ !Ref SshKeyName, "" ]]
  InstanceMaximumHourlyPriceProvided: !Not [!Equals [ !Ref InstanceMaximumHourlyPrice, "" ]]
  ScheduledInstanceStartEnabled: !Not [!Equals [ !Ref InstanceStartupTimes, "" ]]
  ScheduledInstanceShutdownEnabled: !Not [!Equals [ !Ref InstanceShutdownTimes, "" ]]

Resources:
  JitsiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Jitsi Security Groups
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 4443
        ToPort: 4443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 10000
        ToPort: 20000
        CidrIp: 0.0.0.0/0

  JitsiAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: "PT7M"
        # WaitOnResourceSignals: true
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      LaunchConfigurationName:
        Ref: "JitsiInstanceLaunchConfig"
      MaxSize: "2"
      MinSize: "1"
      TerminationPolicies:
        - NewestInstance
        - Default
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: true
      - Key: Application
        Value: Jitsi
        PropagateAtLaunch: true

  ScheduledInstanceStart:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledInstanceStartEnabled
    Properties:
      AutoScalingGroupName:
        Ref: "JitsiAutoScalingGroup"
      MaxSize: 2
      MinSize: 1
      Recurrence:
        Ref: InstanceStartupTimes
  ScheduledInstanceShutdown:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledInstanceShutdownEnabled
    Properties:
      AutoScalingGroupName:
        Ref: "JitsiAutoScalingGroup"
      MaxSize: 0
      MinSize: 0
      Recurrence:
        Ref: InstanceShutdownTimes

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: JitsiAutoScalingGroup
    Properties:
      Handle:
        Ref: WaitHandle
      Timeout: "4200"

  JitsiInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceMonitoring: false
      KeyName:
        Fn::If:
        - SshKeyNameProvided
        - Ref: SshKeyName
        - Ref: AWS::NoValue
      SpotPrice:
        Fn::If:
        - InstanceMaximumHourlyPriceProvided
        - Ref: InstanceMaximumHourlyPrice
        - Ref: AWS::NoValue

      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - HVM64
      SecurityGroups:
      - Ref: JitsiSecurityGroup
      InstanceType:
        Fn::FindInMap:
        - AWSInstanceType2Arch
        - Ref: InstanceSize
        - InstanceType
      UserData:
        Fn::Base64: !Join
          - ''
          - - |
              #!/bin/bash
              # logs can be found in /var/log/cloud-init-output.log

              # prepare instance with AWS CloudFormation utilities
              # based on https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html#cfn-helper-scripts-reference-downloads
              command -v curl >/dev/null 2>&1 || apt install -y curl
              command -v python >/dev/null 2>&1 || apt install -y python
              if ! command -v cfn-signal>/dev/null 2>&1; then
              (
                apt install -y python-requests
                cd "$(mktemp -d)"
                curl -sL "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz" | \
                  tar -xzf -
                cd ./*
                python setup.py install
                ln -sf /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
              )
              fi

            - !Sub |
              # Ensure to signal exit to CloudFormation
              trap 'cfn_signal_wait_exit $?' EXIT
              set -e

              cfn_signal_wait_exit() {
                set +eu || true
                local reason="SUCCESS"
                if [ "$1" != "0" ]; then
                  reason=$(tail -c 100 /var/log/cloud-init-output.log | tr -d"\n" || true)
                  [ -n "$reason" ] || reason="FAILURE"
                fi

                cfn-signal -e "$1" --stack "${AWS::StackName}" --region "${AWS::Region}" \
                  --reason "$reason" "${WaitHandle}"
              }

            - !If
              - SshKeyNameProvided
              - FIREWALL_ENABLE_SSH=true
              - FIREWALL_ENABLE_SSH=false
            - !Sub |

              # create Jitsi installer configuration using provided parameters
              recode_certificate_value() {
                [ -n "{1}" ] || echo "{1}" | base64 -d | zcat - | base64 | tr -d "\n"
              }
              INSTALL_DIR="$(mktemp -d)"

              cat << EOF > "$INSTALL_DIR/jitsiinstallrc"
              FULLY_QUALIFIED_HOSTNAME='${FullyQualifiedHostname}'
              SSL_LETSENCRYPT_EMAIL='${SslLetsencryptEmail}'
              SSL_CERTIFICATE_CRT="$(recode_certificate_value '${SslCertificateCrt}')"
              SSL_CERTIFICATE_KEY="$(recode_certificate_value '${SslCertificateKey}')"
              FIREWALL_ENABLE_SSH="$FIREWALL_ENABLE_SSH"
              HOOKS_PRE_INSTALL_URL='${HooksPreInstallUrl}'
              HOOKS_POST_INSTALL_URL='${HooksPostInstallUrl}'
              HOOKS_WAIT_TIME='${HooksWaitTime}'
              JITSI_MEETING_CREATOR_USERNAME='${MeetingCreatorUsername}'
              JITSI_MEETING_CREATOR_PASSWORD='${MeetingCreatorPassword}'
              JITSI_WATERMARK_IMAGE_URL='${JitsiWatermarkImageUrl}'
              JITSI_ENABLE_WELCOME_PAGE='${JitsiEnableWelcomePage}'
              JITSI_START_AUDIO_MUTED=${JitsiStartAudioMuted}
              JITSI_START_VIDEO_MUTED=${JitsiStartVideoMuted}
              JITSI_REQUIRE_DISPLAY_NAME=${JitsiRequireDisplayName}
              DIALIN_SIP_ACCOUNT_UID='${DialinSipAccountUid}'
              DIALIN_SIP_PASSWORD='${DialinSipPassword}'
              DIALIN_PSTN_NUMBERS='${DialinSipPhoneNumbers}'
              EOF
            - |

              # install Jitsi with latest automated installer
              latest_tarball=$(
                curl -sL "https://api.github.com/repos/jtrefke/jitsi-meet-video-conference-installer/releases/latest" | \
                sed -En 's/.*tarball_url.+(http[^"]+).*/\1/p'
              )
              curl -sL "${latest_tarball}" | tar -xzf - -C "${INSTALL_DIR}"

              mv "${INSTALL_DIR}/jtrefke-jitsi-meet-video-conference-installer"*/* \
                "${INSTALL_DIR}"
              chmod +x "${INSTALL_DIR}/installer/install-jitsi.sh"

              "${INSTALL_DIR}/installer/install-jitsi.sh"
              rm -rf "${INSTALL_DIR}"

Outputs:
  JitsiServerHostname:
    Description: Find Jitsi meet install at
    Value: !Sub 'https://${FullyQualifiedHostname}'
  Info:
    Description: |
      Allow a few minutes after launch until the setup has finished.

      Client Downloads:
      Android: https://play.google.com/store/apps/details?id=org.jitsi.meet /
      iOS: https://itunes.apple.com/us/app/jitsi-meet/id1165103905 /
      Slack: https://slack.com/oauth/authorize?client_id=116888949298.122751011265&scope=bot,commands /
      Desktop: https://desktop.jitsi.org/Main/Download#stableline

      Find more info about Jitsi at https://jitsi.org/
    Value: Notes
